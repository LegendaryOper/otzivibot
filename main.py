#761983343
from threading import Thread

import telebot
import pymysql
from config import *
from time import sleep,time
import re

token = '5181846470:AAEQZCDqenxYj29lH25KXBxuwKoKCpASVwc'
ADMINS = [761983343]
bot = telebot.TeleBot(token)

start_message = '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'

# —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∞
start_keyboard = telebot.types.ReplyKeyboardMarkup(True)
zarab_message = '–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—åüî•üî•üî•'
account_message = '–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'
start_keyboard.row(zarab_message, account_message)

# –∫–ª–∞–≤–∞ –Ω–∞ –≤–ª–∞–¥–µ–Ω–∏–µ –∞–∫–∫–æ–º –æ–¥–Ω–æ–π –∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º
email_ac—Åess_keyboard = telebot.types.ReplyKeyboardMarkup(True)
email_yes_message = '–î–∞üòÄ'
email_no_message = '–ù–µ—Çüò©'
email_ac—Åess_keyboard.row(email_yes_message, email_no_message)

# –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
for_message_platforms = ['–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã', 'Google –∫–∞—Ä—Ç—ã', 'Restoclub', 'Zoon', '–§–ª–∞–º–ø', '–û—Ç–∑–æ–≤–∏–∫', '2–ì–ò–°', 'Allcafe']
primer_platforms = ['–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã - 1', 'Google –∫–∞—Ä—Ç—ã - 2', 'Restoclub - 3', 'Zoon - 4', '–§–ª–∞–º–ø - 5', '–û—Ç–∑–æ–≤–∏–∫ - 6',
                    '2–ì–ò–° - 7', 'Allcafe - 8']

primer = '/add\n–û—Ç–∑—ã–≤ –æ –ú–≥—É\n1\n50—Ä\n1\nhttps://yandex.by/maps/org/mgu/15803908161/?ll=37.552516%2C55.685061&z=17.96'\
'\n –¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç—Ä–∏ –æ—Ç–∑—ã–≤–∞ –æ–± —ç—Ç–æ–º –∑–¥–∞–Ω–∏–∏. –û—Ç–∑—ã–≤—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–∞–º, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –±—ã–ª–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ. –ö–∞–∫ —Å–¥–µ–ª–∞–µ—à—å'\
' –ø—Ä–∏—Å—ã–ª–∞–π —Å–∫—Ä–∏–Ω'

platforms_ids = {'1': '–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã', '2': 'Google –∫–∞—Ä—Ç—ã', '3': 'Restoclub','4': 'Zoon','5': '–§–ª–∞–º–ø', '6': '–û—Ç–∑–æ–≤–∏–∫',
                 '7': '2–ì–ò–°', '8': 'Allcafe'}
sex = ['1 - –ú—É–∂—Å–∫–æ–π', '2 - –ñ–µ–Ω—Å–∫–∏–π', '3 - –õ—é–±–æ–π']
sex_array = ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–õ—é–±–æ–π']
# –∫–ª–∞–≤–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
platforms_keyboard = telebot.types.ReplyKeyboardMarkup(True)
for platform in for_message_platforms:
    platforms_keyboard.row(platform)







try:
    connection = pymysql.connect(host=host,
                                 port=3306,
                                 user=user,
                                 password=password,
                                 database=db_name,
                                 cursorclass=pymysql.cursors.DictCursor
                                 )


    db_setting1 = 'SET SQL_SAFE_UPDATES = 0'


    connection.cursor().execute(db_setting1)

    connection.cursor().close()
    print('succesful')


except Exception as ex:
    print("Error")
    print(ex)







# –∫–ª–∞–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ —é–∑–µ—Ä–∞
sex_keyboard = telebot.types.ReplyKeyboardMarkup(True)
sex_messages = ['–ú—É–∂—Å–∫–æ–πüë±üèº‚Äç‚ôÇ', '–ñ–µ–Ω—Å–∫–∏–πüë©üèΩ‚Äçü¶∞']
sex_keyboard.row(sex_messages[0], sex_messages[1])

# –∫–ª–∞–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
account_keyboard = telebot.types.ReplyKeyboardMarkup(True)
account_messages = ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º']
account_keyboard.row(account_messages[0])

# –∫–ª–∞–≤–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
select_keyboard = telebot.types.ReplyKeyboardMarkup(True)
select_messages = ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º', '–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ']
select_keyboard.row(select_messages[0], select_messages[1])

# –ö–ª–∞–≤—ã –∞–¥–º–∏–Ω–∞
admin_keyboard = telebot.types.ReplyKeyboardMarkup(True)
admin_messages = ['–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è']
admin_keyboard.row(admin_messages[0], admin_messages[1])

# —Ñ—É–Ω–∫—Ü–∏–∏
def check_userid_in_database(id):
    cursor = connection.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id=%s", (id,))
    data = cursor.fetchall()
    if len(data) == 0:
        cursor.close()
        return True
    else:
        cursor.close()
        return False


def db_table_val(user_id: int):
    cursor1 = connection.cursor()
    if check_userid_in_database(user_id):
        cursor1.execute('INSERT INTO users (user_id,full_count,now_task_id,today_tasks,today_categories_ids) VALUES (%s,0,0,0,";")', (user_id,))
        connection.commit()
    cursor1.close()


def add_sex_to_user(sex,user_id):
    cursor1 = connection.cursor()
    cursor1.execute('update users set sex =%s where user_id=%s', (sex, user_id))
    connection.commit()
    cursor1.close()


def select_user_info(user_id):
    cursor1 = connection.cursor()
    cursor1.execute('select * from users where user_id=%s', (user_id,))
    data = cursor1.fetchall()[0]
    print(data)
    result = '–¢–≤–æ–π –ø–æ–ª: '+sex_array[data['sex']-1] + '\n–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: '+str(data['full_count'])\
             + '\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ' + str(data['today_tasks'])
    connection.commit()
    cursor1.close()
    return result


def add_user_category_now(category_id, user_id):
    cursor = connection.cursor()
    cursor.execute('update users set category_id=%s where user_id=%s', (category_id, user_id))
    connection.commit()
    cursor.close()

def select_tasks_ids_for_user(user_id):
    cursor1 = connection.cursor()
    cursor1.execute('select * from users where user_id=%s', (user_id,))
    data = cursor1.fetchall()[0]
    print(data)
    pattern = r'\d+'
    match = re.findall(pattern, str(data['today_categories_ids']))
    print('match',match)
    if data['now_task_id'] > 0:
        cursor1.close()
        return False
    elif data['today_tasks'] >= 3:
        cursor1.close()
        return 'too_many'
    cursor1.execute('select id, category_id from tasks where sex in (%s,3) and category_id=%s', (data['sex'], (data['category_id'])))
    tasks = cursor1.fetchall()
    for task in tasks:
        print('task',task['category_id'])
        if str(task['category_id']) in match:
            cursor1.close()
            return 'banned'
    cursor1.close()
    return [task['id'] for task in tasks]

def select_sorted_tasks(tasks_ids):
    cursor = connection.cursor()
    dataarr=[]
    for ids in tasks_ids:
        cursor.execute('select  name, sex, category_id, id from tasks where id=%s', (ids,))
        data = cursor.fetchall()[0]
        dataarr.append(data)
    cursor.close()
    return dataarr

def select_user_now_task(user_id):
    cursor = connection.cursor()
    cursor.execute('select * from tasks where id in (select now_task_id from users where user_id=%s)', (user_id,))
    data=cursor.fetchall()[0]
    cursor.execute('delete from tasks where id=%s', (data['id'],))
    connection.commit()
    cursor.close()
    print(data)
    zadaniye = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ' + data['name'] + '\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' + platforms_ids[
        str(data['category_id'])] + '\nId –∑–∞–¥–∞–Ω–∏—è: ' + str(data['id']) +\
               '\n–ü–æ–ª: ' + sex_array[data['sex'] - 1] + '\n–û–ø–ª–∞—Ç–∞: ' + data['cost'] + '\n' + '\n–°—Å—ã–ª–∫–∞: ' + data[
                   'url'] + '\n–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ' + data['descript']
    return zadaniye




# —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
def add_task(arr1):
    print(arr1)
    arr1=[i.strip() for i in arr1]
    print(arr1)
    cursor = connection.cursor()
    cursor.execute('insert into tasks(name,category_id,cost,sex,url,descript,vision) '\
                   'values (%s,%s,%s,%s,%s,%s,true)', (arr1[1], arr1[2], arr1[3], arr1[4], arr1[5], arr1[6]))
    connection.commit()
    cursor.close()


def select_last_task():
    cursor = connection.cursor()
    cursor.execute('select * from tasks order by id DESC limit 1')
    data=cursor.fetchall()[0]
    print(data['name'])
    cursor.execute('update categories set tasks_id = concat(tasks_id,%s,";") where id = %s', (str(data['id']),str(data['category_id'])))
    zadaniye ='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: '+data['name']+'\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: '+platforms_ids[str(data['category_id'])]+'\nId –∑–∞–¥–∞–Ω–∏—è: '+str(data['id'])+\
              '\n–ü–æ–ª: '+sex_array[data['sex']-1]+'\n–û–ø–ª–∞—Ç–∞: '+data['cost']+'\n'+'\n–°—Å—ã–ª–∫–∞: '+data['url']+'\n–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: '+data['descript']
    cursor.close()
    print(zadaniye)
    return zadaniye


def select_all_tasks():
    cursor = connection.cursor()
    cursor.execute('select name, sex, category_id, id from tasks')
    data = cursor.fetchall()
    cursor.close()
    return data

def select_task(task_id):
    cursor = connection.cursor()
    cursor.execute('select * from tasks where id=%s', (task_id,))
    data = cursor.fetchall()[0]
    print(data['name'])
    zadaniye = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ' + data['name'] + '\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' + platforms_ids[
        str(data['category_id'])] + '\nId –∑–∞–¥–∞–Ω–∏—è: ' + str(data['id']) + \
               '\n–ü–æ–ª: ' + sex_array[data['sex']-1] + '\n–û–ø–ª–∞—Ç–∞: ' + data['cost'] + '\n' + '\n–°—Å—ã–ª–∫–∞: ' + data[
                   'url'] + '\n–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ' + data['descript']
    cursor.close()
    print(zadaniye)
    return zadaniye


def update_after_task_upload(user_id):
    cursor = connection.cursor()
    cursor.execute('update users set now_task_id = 0,full_count = full_count+1,today_tasks=today_tasks+1'
                   ' where user_id = %s', (user_id,))
    connection.commit()
    cursor.close()



@bot.callback_query_handler(func=lambda callback_query: True)
def query_callback(callback_query):
    pattern = r'\d+'
    match = re.search(pattern, str(callback_query.data))
    task_id = match.group()
    print(task_id)
    cursor = connection.cursor()
    if str(callback_query.data).startswith('admin'):
        inline_button = telebot.types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data=f'del {task_id}')
        inline_keyboard = telebot.types.InlineKeyboardMarkup().add(inline_button)
        bot.send_message(callback_query.message.chat.id, select_task(task_id), reply_markup=inline_keyboard)
    elif str(callback_query.data).startswith('del'):
        cursor.execute('delete from tasks where id=%s', (task_id,))
        connection.commit()
        bot.send_message(callback_query.message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', reply_markup=admin_keyboard)
    elif str(callback_query.data).startswith('user'):
        inline_button = telebot.types.InlineKeyboardButton('–í–∑—è—Ç—å—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data=f'work {task_id}')
        inline_keyboard = telebot.types.InlineKeyboardMarkup().add(inline_button)
        bot.send_message(callback_query.message.chat.id, select_task(task_id), reply_markup=inline_keyboard)
    elif str(callback_query.data).startswith('work'):
        cursor.execute('select category_id from tasks where id=%s', (task_id,))
        category_id = cursor.fetchall()[0]['category_id']
        cursor.execute(
            'update users set now_task_id=(%s),today_categories_ids=concat(today_categories_ids,%s) where user_id = %s'
            , (task_id, str(category_id)+';', callback_query.message.chat.id))
        connection.commit()
        bot.send_message(callback_query.message.chat.id, '–ö–∞–∫ —Å–¥–µ–ª–∞–µ—à—å –∑–∞–¥–∞–Ω–∏–µ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                         reply_markup=start_keyboard)

    elif str(callback_query.data).startswith('allow'):
        bot.send_message(task_id,'–¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–∏–ª–∏, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω.',
                         reply_markup=start_keyboard)

    elif str(callback_query.data).startswith('abadon'):
        bot.send_message(task_id,
                         '–¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –æ–¥–æ–±—Ä–∏–ª–∏.', reply_markup=start_keyboard)
    cursor.close()










@bot.message_handler(content_types=['text'])
def message_text_handler(message):
    print(message.text)
    user_id = message.from_user.id
    # admin
    if user_id in ADMINS:
        if message.text == '/start':
            db_table_val(message.from_user.id)
            bot.send_message(message.from_user.id, '–ó–¥–æ—Ä–æ–≤–∞ –•–æ–∑—è–∏–Ω', reply_markup=admin_keyboard)
        if message.text == admin_messages[0]:
            bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /add, –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤–ø–∏—à–∏ '
                                                   '–º–Ω–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è(–Ω–µ –±–æ–ª–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤), –Ω–æ–º–µ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã,'
                                                   '—Ü–µ–Ω—É –∑–∞–¥–∞–Ω–∏—è, –Ω–æ–º–µ—Ä –ø–æ–ª–∞, —Å—Å—ã–ª–∫—É, –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è')
            bot.send_message(message.from_user.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n'+'\n'.join(primer_platforms))
            bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä–∞ –ø–æ–ª–æ–≤:\n' + '\n'.join(sex))

            bot.send_message(message.from_user.id, '–ü—Ä–∏–º–µ—Ä:\n'+primer)
        if message.text.startswith('/add'):
            taskarr = message.text.split('\n')
            try:
                add_task(taskarr)
                bot.send_message(message.from_user.id, '–û–∫–µ–π, —è –¥–æ–±–∞–≤–∏–ª —Ç–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –º–æ–∂–µ—à—å –Ω–∞ –Ω–µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', reply_markup=admin_keyboard)
                bot.send_message(message.from_user.id, select_last_task())
            except Exception as ex:
                bot.send_message(message.from_user.id, '–£–ø—Å..—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',reply_markup=admin_keyboard)
                print(ex)
        if message.text == admin_messages[1]:
            try:
                for task in select_all_tasks():
                    sleep(0.1)
                    inline_button = telebot.types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data=f'admin {task["id"]}')
                    inline_keyboard = telebot.types.InlineKeyboardMarkup().add(inline_button)
                    task_message = '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' + platforms_ids[str(task['category_id'])] + '\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: '\
                                   + task['name'] + '\n–ü–æ–ª: ' + sex_array[task['sex']-1]
                    bot.send_message(user_id, task_message, reply_markup=inline_keyboard)
            except Exception as ex:
                bot.send_message(message.from_user.id, '–£–ø—Å..—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',reply_markup=admin_keyboard)
                print(ex)

    else:

        if message.text == '/start':
            db_table_val(message.from_user.id)
            bot.send_message(message.from_user.id, start_message, reply_markup=start_keyboard)
        elif message.text == account_message:
            bot.send_message(message.from_user.id,'–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ', reply_markup=account_keyboard)
            bot.send_message(message.from_user.id, select_user_info(user_id), reply_markup=account_keyboard)
        elif message.text == account_messages[0]:
            bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞—é...', reply_markup=start_keyboard)
            pass

        elif message.text == zarab_message:
            bot.send_message(message.from_user.id, '–û–∫–µ–π, —É —Ç–µ–±—è –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º?', reply_markup=email_ac—Åess_keyboard)
            bot.send_message(message.from_user.id, ', '.join(for_message_platforms),reply_markup=email_ac—Åess_keyboard)
        elif message.text in (email_yes_message,select_messages[0]):
            bot.send_message(message.from_user.id, '–û–∫–µ–π, –Ω–∞ –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è?', reply_markup=platforms_keyboard)
        elif message.text == email_no_message:
            bot.send_message(message.from_user.id, '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Ö–æ—Ç—è '
                                                   '–±—ã –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:')
            bot.send_message(message.from_user.id, ', '.join(for_message_platforms))
            bot.send_message(message.from_user.id, '–ü—Ä–∏—Ö–æ–¥–∏, –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è', reply_markup=email_ac—Åess_keyboard)
        elif message.text in for_message_platforms:
            add_user_category_now(for_message_platforms.index(message.text)+1, user_id)
            bot.send_message(message.from_user.id, '–ü–æ–Ω—è–ª, –∫–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?', reply_markup=sex_keyboard)
        elif message.text in sex_messages:
            if message.text == sex_messages[0]:
                add_sex_to_user('1',user_id)
            else:
                add_sex_to_user('2',user_id)
            select = select_tasks_ids_for_user(user_id)
            if select == False:
                bot.send_message(message.from_user.id, '–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏–µ, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤–∑—è–ª—Å—è',
                                 reply_markup=select_keyboard)
            elif select == 'too_many':
                bot.send_message(message.from_user.id, '–¢—ã —Å–¥–µ–ª–∞–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞',
                                 reply_markup=select_keyboard)
            elif select == 'banned':
                bot.send_message(user_id, '–¢—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–ª –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ! –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é!',
                                 reply_markup=select_keyboard)
            elif len(select) == 0:
                bot.send_message(message.from_user.id, '–î–ª—è —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π',
                                 reply_markup=select_keyboard)
            else:

                for task in select_sorted_tasks(select):
                    sleep(0.1)
                    inline_button = telebot.types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                                                                       callback_data=f'user {task["id"]}')
                    inline_keyboard = telebot.types.InlineKeyboardMarkup().add(inline_button)
                    task_message = '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' + platforms_ids[str(task['category_id'])] + '\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: ' \
                                   + task['name'] + '\n–ü–æ–ª: ' + sex_array[task['sex'] - 1]
                    bot.send_message(user_id, task_message, reply_markup=inline_keyboard)
                # except Exception as ex:
                #     bot.send_message(message.from_user.id, '–£–ø—Å..—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É',
                #                      reply_markup=start_keyboard)
                #     print(ex)

        elif message.text == select_messages[1]:
            bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ id –∑–∞–¥–∞–Ω–∏—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å—Å—è')


        # if message.text == (pk –∑–∞–¥–∞–Ω–∏—è)
        #   if pk –∑–∞–¥–∞–Ω–∏—è not in banned_categories –¥–ª—è —é–∑–µ—Ä–∞
        #             –≤—ã—Å–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        #             sql –∑–∞–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

        else:bot.send_message(message.from_user.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é', reply_markup=start_keyboard)

@bot.message_handler(content_types=['photo','media_group'])
def photo_handler(message):
    sub_id=message.from_user.id
    bot.send_message(sub_id,'–ú–æ–ª–æ–¥–µ—Ü! –¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∞. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è—Ç'
                                          '- —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å —Ç–æ–±–æ–π –ª–∏—á–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω –¥–ª—è'
                                          ' –æ–ø–ª–∞—Ç—ã',reply_markup=start_keyboard)
    inline_button = telebot.types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'allow {sub_id}')
    inline_button1 = telebot.types.InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'abadon {sub_id}')
    inline_keyboard = telebot.types.InlineKeyboardMarkup().add(inline_button,inline_button1)
    task=select_user_now_task(message.from_user.id)
    for admin in ADMINS:
        bot.send_message(admin, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–∏—Å–ª–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n'
                                f'–í–æ—Ç –µ–≥–æ –∑–∞–¥–∞–Ω–∏–µ:\n'+task)
        print(message.media_group_id)
        idphoto = message.photo[0].file_id
        bot.send_photo(admin, idphoto, reply_markup=inline_keyboard)
    update_after_task_upload(message.from_user.id)

def update_with_time():
    cursor = connection.cursor()
    cursor.execute('update users set today_tasks = 0, today_categories_ids = ";"')
    connection.commit()
    cursor.close()
    sleep(60*60*24)

sql_time_update_thread = Thread(target=update_with_time)
sql_time_update_thread.start()

polling_thread = Thread(target=bot.polling, args=(True,0))
polling_thread.start()

while True:
    sleep(50)
    try:
        connection = pymysql.connect(host=host,
                                     port=3306,
                                     user=user,
                                     password=password,
                                     database=db_name,
                                     cursorclass=pymysql.cursors.DictCursor
                                     )

        db_setting1 = 'SET SQL_SAFE_UPDATES = 0'

        connection.cursor().execute(db_setting1)

        connection.cursor().close()
        print('succesful')


    except Exception as ex:
        print("Error")
        print(ex)

