#761983343
from threading import Thread

import telebot
import pymysql
from config import *
from time import sleep,time
import re



def connect_to_db():
    connection = pymysql.connect(host=host,
                                 port=3306,
                                 user=user,
                                 password=password,
                                 database=db_name,
                                 cursorclass=pymysql.cursors.DictCursor
                                 )

    db_setting1 = 'SET SQL_SAFE_UPDATES = 0'

    connection.cursor().execute(db_setting1)

    connection.cursor().close()
    return connection
connection = connect_to_db()
token = '5181846470:AAEQZCDqenxYj29lH25KXBxuwKoKCpASVwc'
ADMINS = [619616592,761983343]
bot = telebot.TeleBot(token)

start_message = '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'
attention_message = '–í–Ω–∏–º–∞–Ω–∏–µ! –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∏ —Å–µ–±–µ –∫–∞–∫–æ–π –Ω–∏–±—É–¥—å username(–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -> –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)' \
                    ', –µ—Å–ª–∏ –æ–Ω –µ—â–µ —É —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∞–¥–º–∏–Ω –Ω–µ —Å–º–æ–∂–µ—Ç —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –æ–ø–ª–∞—Ç—ã.'

vazhno = '–í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –æ—Ç–∑—ã–≤–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∏–ª–∏ Google –ü–û–ñ–ê–õ–£–ô–°–¢–ê, –ê–≤–∏—Ç–æ (–ù–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è),' \
          ' –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ –º–µ–Ω–µ–µ 2—Ö –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥, –µ—Å–ª–∏ –í—ã –≤–æ–∑—å–º–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–≥–æ' \
          ' –∞–∫–∫–∞—É–Ω—Ç–∞, –í–∞–º –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞–≤—Å–µ–≥–¥–∞ ( –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ —Å–≤–æ—ë –∏ –≤–∞—à–µ –≤—Ä–µ–º—è) –æ—Ç–∑—ã–≤—ã —Å —Ç–∞–∫–∏—Ö' \
          ' –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è.–ü–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω, —Ç—É–¥–∞ –ª–∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏,' \
          ' –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–¥–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –í–∞—à –æ—Ç–∑—ã–≤, ' \
          '—á—Ç–æ –æ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤. –ï—Å–ª–∏ –≤—ã —Å–∫–∏–Ω–µ—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ ' \
          '1-–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤—Å–µ–≥–¥–∞.'

pravila = '–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º:\n'\
'1. –° –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –±–æ–ª–µ–µ 1 –æ—Ç–∑—ã–≤–∞ –≤ –¥–µ–Ω—å (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å  - 1.5 –¥–Ω—è)\n'\
'2. –í –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 1-–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –≤—Å–µ–≥–¥–∞)\n'\
'3. –ù–∞ –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –í—ã –±–µ—Ä–µ—Ç–µ, –≤—ã–¥–µ–ª—è–µ—Ç—Å—è 20 –º–∏–Ω—É—Ç, –≤ —Ç–æ–º —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –í—ã –Ω–µ —É—Å–ø–µ–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ, ' \
'–¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –í–∞–º —Ç–∞–∫ –∂–µ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ (–≠—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ª—é–¥–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º–µ—Ä–µ–Ω—ã –±—É–¥—É—Ç –ø–æ–º–µ—à–∞—Ç—å —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞),' \
' –ø–æ—ç—Ç–æ–º—É –ü–û–ñ–ê–õ–£–ô–°–¢–ê –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞—à–ª–∏ –≤ –±–æ—Ç–∞.\n'\
'4. –í—ã–ø–ª–∞—Ç—ã: –í—ã–ø–ª–∞—Ç—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É, –ø–æ –∏—Ç–æ–≥–∞–º –í–∞—à–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –µ–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –±–æ—Ç–µ —è –≤–∏–∂—É, ' \
'–∫—Ç–æ –∏ —Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–ª –æ—Ç–∑—ã–≤–æ–≤, —Å–∫–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–æ—Å—å –∏ —Å–∫–æ–ª—å–∫–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–æ—Å—å, –ø–æ—ç—Ç–æ–º—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ ' \
'–ø—ã—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å)\n'\
'5. –¶–µ–Ω—ã: –±—É–¥—É—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–µ–Ω(–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç) 50 –∏ 25 —Ä—É–±–ª–µ–π, ' \
'–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±—É–¥—É—Ç –æ—Ç–∑—ã–≤—ã –ø–æ 50 —Ä—É–±–ª–µ–π –∑–∞ –®–¢, –±—É–¥—É—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–∑—ã–≤—ã, –∑–∞ –Ω–∏—Ö —è –±—É–¥—É –ø–ª–∞—Ç–∏—Ç—å –ø–æ 25—Ä —à—Ç'


referal = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø–æ–æ—â—Ä–µ–Ω–∏—è:\n' \
          '–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±–æ—Ç –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–∫–æ–ª—å–∫–æ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –¥—Ä—É–∑–µ–π, –∫–∞–∫–∞—è —É –Ω–∏—Ö ' \
          '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç–¥. –£ —Ç–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ, —Ç–∞–º –±—É–¥—É—Ç –∑–∞–¥–∞–Ω–∏—è, ' \
          '–∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –±—É–¥—É –ø–ª–∞—Ç–∏—Ç—å –æ—Ç 100—Ä –∏ —Å—Ä–∞–∑—É –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å(–ø–æ –í–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é),' \
          ' –¥—Ä—É–≥–∏–µ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ –∑–∞–¥–∞–Ω–∏—è.'

# —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∞
start_keyboard = telebot.types.ReplyKeyboardMarkup(True)
zarab_message = '–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—åüî•üî•üî•'
account_message = '–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'
pravila_message = '–ü—Ä–∞–≤–∏–ª–∞'
start_keyboard.row(zarab_message, account_message)
start_keyboard.row(pravila_message)

# –∫–ª–∞–≤–∞ –Ω–∞ –≤–ª–∞–¥–µ–Ω–∏–µ –∞–∫–∫–æ–º –æ–¥–Ω–æ–π –∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º
email_ac—Åess_keyboard = telebot.types.ReplyKeyboardMarkup(True)
email_yes_message = '–î–∞üòÄ'
email_no_message = '–ù–µ—Çüò©'
email_ac—Åess_keyboard.row(email_yes_message, email_no_message)

# –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
for_message_platforms = ['–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã', 'Google –∫–∞—Ä—Ç—ã', 'Restoclub', 'Zoon', '–§–ª–∞–º–ø', '–û—Ç–∑–æ–≤–∏–∫', '2–ì–ò–°', 'Allcafe',
                         '–ê–≤–∏—Ç–æ']
primer_platforms = ['–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã - 1', 'Google –∫–∞—Ä—Ç—ã - 2', 'Restoclub - 3', 'Zoon - 4', '–§–ª–∞–º–ø - 5', '–û—Ç–∑–æ–≤–∏–∫ - 6',
                    '2–ì–ò–° - 7', 'Allcafe - 8', '–ê–≤–∏—Ç–æ - 9']

primer = '/add\n–û—Ç–∑—ã–≤ –æ –ú–≥—É\n1\n50—Ä\n1\nhttps://yandex.by/maps/org/mgu/15803908161/?ll=37.552516%2C55.685061&z=17.96'\
'\n –¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç—Ä–∏ –æ—Ç–∑—ã–≤–∞ –æ–± —ç—Ç–æ–º –∑–¥–∞–Ω–∏–∏. –û—Ç–∑—ã–≤—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–∞–º, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –±—ã–ª–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ. –ö–∞–∫ —Å–¥–µ–ª–∞–µ—à—å'\
' –ø—Ä–∏—Å—ã–ª–∞–π —Å–∫—Ä–∏–Ω'

platforms_ids = {'1': '–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã', '2': 'Google –∫–∞—Ä—Ç—ã', '3': 'Restoclub','4': 'Zoon','5': '–§–ª–∞–º–ø', '6': '–û—Ç–∑–æ–≤–∏–∫',
                 '7': '2–ì–ò–°', '8': 'Allcafe', '9': '–ê–≤–∏—Ç–æ'}
sex = ['1 - –ú—É–∂—Å–∫–æ–π', '2 - –ñ–µ–Ω—Å–∫–∏–π', '3 - –õ—é–±–æ–π']
sex_array = ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–õ—é–±–æ–π']
# –∫–ª–∞–≤–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
platforms_keyboard = telebot.types.ReplyKeyboardMarkup(True)
for platform in for_message_platforms:
    platforms_keyboard.row(platform)









# –∫–ª–∞–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ —é–∑–µ—Ä–∞
sex_keyboard = telebot.types.ReplyKeyboardMarkup(True)
sex_messages = ['–ú—É–∂—Å–∫–æ–πüë±üèº‚Äç‚ôÇ', '–ñ–µ–Ω—Å–∫–∏–πüë©üèΩ‚Äçü¶∞']
sex_keyboard.row(sex_messages[0], sex_messages[1])

# –∫–ª–∞–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
account_keyboard = telebot.types.ReplyKeyboardMarkup(True)
account_messages = ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º']
account_keyboard.row(account_messages[0])

# –∫–ª–∞–≤–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
select_keyboard = telebot.types.ReplyKeyboardMarkup(True)
select_messages = ['–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ']
select_keyboard.row(select_messages[0], select_messages[1])

# –ö–ª–∞–≤—ã –∞–¥–º–∏–Ω–∞
admin_keyboard = telebot.types.ReplyKeyboardMarkup(True)
admin_messages = ['–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞']
admin_keyboard.row(admin_messages[0], admin_messages[1], admin_messages[2])

tasks_keyboard = telebot.types.ReplyKeyboardMarkup(True)
tasks_messages = ['–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', '–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è']
tasks_keyboard.row(tasks_messages[0], tasks_messages[1])

exit_keyboard = telebot.types.ReplyKeyboardMarkup(True)
exit_keyboard.row('–ù–∞–∑–∞–¥')

# —Ñ—É–Ω–∫—Ü–∏–∏
def check_userid_in_database(id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute("SELECT user_id FROM users WHERE user_id=%s", (id,))
        data = cursor.fetchall()
        cursor.close()
        connection.close()
        if len(data) == 0:
            return True
        else:
            return False
    except Exception as ex:
        print("–û—à–∏–±–∫–∞ –≤ checkuserid")
        print(ex)
        cursor.close()



def check_pravila(user_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('select pravila from users where user_id=%s', (user_id,))
        data = cursor.fetchall()[0]['pravila']
        cursor.close()
        connection.close()
        if data == 0:
            return False
        elif data is None:
            print('checkpravila none')
            bot.send_message(user_id, '–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', reply_markup=start_keyboard)
        else:
            return True
    except Exception as ex3:
        print(ex3)
        print('error in checkpravila')


def add_user_pravila(user_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('update users set pravila = 1 where user_id=%s', (user_id,))
        connection.commit()
        cursor.close()
        connection.close()
    except Exception as ex3:
        print(ex3)
        print('error in adduserpravila')
        cursor.close()



def db_table_val(user_id: int):
    try:
        connection = connect_to_db()
        cursor1 = connection.cursor()
        if check_userid_in_database(user_id):
            cursor1.execute('INSERT INTO users (user_id,full_count,now_task_id,today_tasks,today_categories_ids, pravila) VALUES (%s,0,0,0,";",0)', (user_id,))
            connection.commit()
        cursor1.close()
        connection.close()
    except Exception as ex:
        print('Error in dbtableval')
        print(ex)



def add_sex_to_user(sex,user_id):
    try:
        connection = connect_to_db()
        cursor1 = connection.cursor()
        cursor1.execute('update users set sex =%s where user_id=%s', (sex, user_id))
        connection.commit()
        cursor1.close()
        connection.close()
    except Exception as ex:
        print('error in add sex to user')
        print(ex)



def select_user_info(user_id):
    try:
        connection = connect_to_db()
        cursor1 = connection.cursor()
        cursor1.execute('select * from users where user_id=%s', (user_id,))
        data = cursor1.fetchall()[0]
        try:
            result = '–¢–≤–æ–π –ø–æ–ª: '+sex_array[data['sex']-1] + '\n–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: '+str(data['full_count'])\
                 + '\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ' + str(data['today_tasks'])
            connection.commit()
            cursor1.close()
        except Exception:
            cursor1.close()
            return '–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, —Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞)'
        connection.close()
        return result
    except Exception as ex:
        print('error in select user info')
        print(ex)



def add_user_category_now(category_id, user_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('update users set category_id=%s where user_id=%s', (category_id, user_id))
        connection.commit()
        cursor.close()
        connection.close()
    except Exception as ex:
        print('error in addusercategorynow')
        print(ex)


def select_tasks_ids_for_user(user_id):
    try:
        connection = connect_to_db()
        cursor1 = connection.cursor()
        cursor1.execute('select * from users where user_id=%s', (user_id,))
        data = cursor1.fetchall()[0]
        pattern = r'\d+'
        match = re.findall(pattern, str(data['today_categories_ids']))
        print('match', match)
        print(str(data['category_id']))
        if data['now_task_id'] > 0:
            cursor1.close()
            connection.close()
            return False
        elif data['today_tasks'] >= 3:
            cursor1.close()
            connection.close()
            return 'too_many'
        elif str(data['category_id']) in match:
            cursor1.close()
            connection.close()
            return 'banned'
        cursor1.execute('select id, category_id from tasks where vision = 1 and sex in (%s,3) and category_id=%s',
                        (data['sex'], (data['category_id'])))
        tasks = cursor1.fetchall()
        cursor1.close()
        connection.close()
        return [task['id'] for task in tasks]
    except Exception as ex:
        print(ex)
        print('error in selecttasksidsforuser')


def select_sorted_tasks(tasks_ids):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        dataarr=[]
        for ids in tasks_ids:
            cursor.execute('select  name, sex, category_id, id from tasks where id=%s', (ids,))
            data = cursor.fetchall()[0]
            dataarr.append(data)
        cursor.close()
        connection.close()
        return dataarr
    except Exception as ex:
        print('error in selectsortedtasks')
        print(ex)


def select_user_now_task(user_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        try:
            cursor.execute('select * from tasks where id in (select now_task_id from users where user_id=%s)', (user_id,))
            data = cursor.fetchall()[0]
        except Exception:
            cursor.execute('update users set now_task_id = 0 where user_id=%s', (user_id,))
            connection.commit()
            return '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        cursor.execute('update tasks set vision = 0 where id=%s', (data['id'],))
        connection.commit()
        cursor.close()
        connection.close()
        zadaniye = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ' + data['name'] + '\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' + platforms_ids[
            str(data['category_id'])] + '\nId –∑–∞–¥–∞–Ω–∏—è: ' + str(data['id']) +\
                   '\n–ü–æ–ª: ' + sex_array[data['sex'] - 1] + '\n–û–ø–ª–∞—Ç–∞: ' + data['cost'] + '\n' + '\n–°—Å—ã–ª–∫–∞: ' + data[
                       'url'] + '\n–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ' + data['descript']
        return zadaniye
    except Exception as ex:
        print(ex)
        print('error in selectusernowtask')


def select_user_now_task_id(user_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('select now_task_id from users where user_id=%s', (user_id,))
        task_id = cursor.fetchall()[0]['now_task_id']
        cursor.close()
        connection.close()
        return task_id
    except Exception as ex:
        print(ex)
        print('error in selectusernowtaskid')




def send_sorted_tasks(user_id,select):
    try:
        connection = connect_to_db()
        for task in select_sorted_tasks(select):
            sleep(0.1)
            inline_button = telebot.types.InlineKeyboardButton('–í–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–¥–∞–Ω–∏–µ',
                                                               callback_data=f'user {task["id"]}')
            inline_keyboard = telebot.types.InlineKeyboardMarkup().add(inline_button)
            task_message = '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' + platforms_ids[str(task['category_id'])] + '\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: ' \
                           + task['name'] + '\n–ü–æ–ª: ' + sex_array[task['sex'] - 1]
            bot.send_message(user_id, task_message, reply_markup=inline_keyboard)
        connection.close()
    except Exception as ex:
        bot.send_message(user_id, '–£–ø—Å..—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏ –∞–¥–º–∏–Ω—É',
                         reply_markup=start_keyboard)
        print('error in sendsortedtasks')
        print(ex)





# —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
def add_task(arr1):
    try:
        connection = connect_to_db()
        arr1 = [i.strip() for i in arr1]
        cursor = connection.cursor()
        cursor.execute('insert into tasks(name,category_id,cost,sex,url,descript,vision) '\
                       'values (%s,%s,%s,%s,%s,%s,true)', (arr1[1], arr1[2], arr1[3], arr1[4], arr1[5], arr1[6]))
        connection.commit()
        cursor.close()
        connection.close()
    except Exception as ex:
        print('error in addtask')
        print('ex')


def select_last_task():
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('select * from tasks order by id DESC limit 1')
        data=cursor.fetchall()[0]
        cursor.execute('update categories set tasks_id = concat(tasks_id,%s,";") where id = %s', (str(data['id']),str(data['category_id'])))
        connection.commit()
        zadaniye ='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: '+data['name']+'\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: '+platforms_ids[str(data['category_id'])]+'\nId –∑–∞–¥–∞–Ω–∏—è: '+str(data['id'])+\
                  '\n–ü–æ–ª: '+sex_array[data['sex']-1]+'\n–û–ø–ª–∞—Ç–∞: '+data['cost']+'\n'+'\n–°—Å—ã–ª–∫–∞: '+data['url']+'\n–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: '+data['descript']
        cursor.close()
        connection.close()
        return zadaniye
    except Exception as ex:
        print('error in selectlasttask')
        print(ex)



def select_all_tasks(flag):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        if flag == 1:
            cursor.execute('select name, sex, category_id, id from tasks where vision = 1')
        else:
            cursor.execute('select name, sex, category_id, id from tasks where vision = 0')
        data = cursor.fetchall()
        cursor.close()
        connection.close()
        return data
    except Exception as ex:
        print(ex)
        print('error in selectalltasks')


def select_task(task_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('select * from tasks where id=%s', (task_id,))
        data = cursor.fetchall()[0]
        zadaniye = '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ' + data['name'] + '\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' + platforms_ids[
            str(data['category_id'])] + '\nId –∑–∞–¥–∞–Ω–∏—è: ' + str(data['id']) + \
                   '\n–ü–æ–ª: ' + sex_array[data['sex']-1] + '\n–û–ø–ª–∞—Ç–∞: ' + data['cost'] + '\n' + '\n–°—Å—ã–ª–∫–∞: ' + data[
                       'url'] + '\n–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ' + data['descript']
        connection.close()
        return zadaniye
    except Exception as ex:
        print(ex)
        print('error selecttask')



def update_after_task_upload(user_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('update users set now_task_id = 0,full_count = full_count+1,today_tasks=today_tasks+1'
                       ' where user_id = %s', (user_id,))
        connection.commit()
        cursor.close()
        connection.close()
    except Exception as ex:
        print(ex)
        print('error in updateaftertask...')



def send_mass_message(message_text):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('select user_id from users')
        data = cursor.fetchall()
        cursor.close()
        connection.close()
        for id_dict in data:
            user_id = id_dict['user_id']
            try:
                if user_id not in ADMINS:
                    bot.send_message(user_id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –ê–¥–º–∏–Ω–∞!!!')
                    bot.send_message(user_id, message_text, reply_markup=start_keyboard)
                    sleep(0.1)
                else:
                    bot.send_message(user_id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', reply_markup=admin_keyboard)
            except Exception:
                print('user with id', user_id,'has banned')
    except Exception as ex:
        print(ex)
        print('error in sendmass')



def update_description(description, task_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('update tasks set descript=%s where id=%s', (description, task_id))
        connection.commit()
        cursor.close()
        connection.close()
    except Exception as ex:
        print('error in update_descript')
        print(ex)




def send_full_task_admin(task_id,user_id):
    try:
        inline_button = telebot.types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data=f'del {task_id}')
        inline_button1 = telebot.types.InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å –≤–∏–¥–∏–º—ã–º', callback_data=f'vis {task_id}')
        inline_button2 = telebot.types.InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–º', callback_data=f'unvis {task_id}')
        inline_button3 = telebot.types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'edit {task_id}')
        inline_keyboard = telebot.types.InlineKeyboardMarkup().row(inline_button, inline_button1, inline_button2)
        inline_keyboard.row(inline_button3)
        bot.send_message(user_id, select_task(task_id), reply_markup=inline_keyboard)
    except Exception as ex2:
        print(ex2)
        print('error im sendfulltask')
        bot.send_message(user_id,'–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø–æ–ª–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ', reply_markup=admin_keyboard)

def deltask(task_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('delete from tasks where id=%s', (task_id,))
        connection.commit()
        cursor.close()
        connection.close()
    except Exception as exc:
        print('error in deltask')
        print(exc)



def vis(task_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('update tasks set vision = 1 where id=%s', (task_id,))
        connection.commit()
        cursor.close()
        connection.close()
    except Exception as ex:
        print('error in vis')
        print(ex)



def unvis(task_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('update tasks set vision=0 where id=%s', (task_id,))
        connection.commit()
        cursor.close()
        connection.close()
    except Exception as ex:
        print('error in unvis')
        print(ex)


def userquery(task_id,chat_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('select category_id from tasks where id=%s', (task_id,))
        category_id = cursor.fetchall()[0]['category_id']
        cursor.execute(
            'update users set now_task_id=(%s),today_categories_ids=concat(today_categories_ids,%s) where user_id = %s'
            , (task_id, str(category_id) + ';', chat_id))
        connection.commit()
        cursor.close()
        connection.close()
    except Exception as ex:
        print('err in user')
        print(ex)


def used(chat_id):
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('select new_task_today from users where user_id=%s', (chat_id))
        new_task_today = cursor.fetchall()[0]['new_task_today']
        if new_task_today == 1:
            print('—Ç—ã –µ–±–ª–∞–Ω')
            bot.send_message(chat_id, '–¢—ã —É–∂–µ –æ—Ç–º–µ–Ω—è–ª —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏–µ. –ë—É–¥—å –¥–æ–±—Ä, –≤—ã–ø–æ–ª–Ω–∏ —ç—Ç–æ.',
                             reply_markup=start_keyboard)
            cursor.close()
        else:
            cursor.execute('update users set now_task_id=0, new_task_today = 1, '
                           'today_categories_ids=substring(today_categories_ids,1,length(today_categories_ids)-2)'
                           'where user_id = %s', (chat_id,))

            connection.commit()
            bot.send_message(chat_id, '–û–∫–µ–π, –ø–æ—Å–º–æ—Ç—Ä–∏ –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è',
                             reply_markup=start_keyboard)
            select = select_tasks_ids_for_user(chat_id)
            send_sorted_tasks(chat_id, select)
            cursor.close()
            connection.close()
    except Exception as ex:
        print('err in used')
        print(ex)





@bot.callback_query_handler(func=lambda callback_query: True)
def query_callback(callback_query):
    pattern = r'\d+'
    match = re.search(pattern, str(callback_query.data))
    task_id = match.group()
    cursor = connection.cursor()
    if str(callback_query.data).startswith('admin'):
        send_full_task_admin(task_id, user_id=callback_query.message.chat.id)
    elif str(callback_query.data).startswith('del'):
        deltask(task_id)
        bot.send_message(callback_query.message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', reply_markup=admin_keyboard)
    elif str(callback_query.data).startswith('edit'):
        bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏ –∫–æ–º–º–∞–Ω–¥—É /desc, –∞–π–¥–∏ –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–≥–æ',
                         reply_markup=admin_keyboard)
        bot.send_message(callback_query.message.chat.id,
                         f'–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ /desc {task_id}', reply_markup=admin_keyboard)
    elif str(callback_query.data).startswith('vis'):
        vis(task_id)
        bot.send_message(callback_query.message.chat.id, f'–ó–∞–¥–∞–Ω–∏–µ c –∞–π–¥–∏ {task_id} —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–æ –≤—Å–µ–º', reply_markup=admin_keyboard)
    elif str(callback_query.data).startswith('unvis'):
        unvis(task_id)
        bot.send_message(callback_query.message.chat.id, f'–ó–∞–¥–∞–Ω–∏–µ c –∞–π–¥–∏ {task_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö',
                         reply_markup=admin_keyboard)
    elif str(callback_query.data).startswith('user'):
        inline_button = telebot.types.InlineKeyboardButton('–Ø —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ', callback_data=f'used {task_id}')
        inline_keyboard = telebot.types.InlineKeyboardMarkup().add(inline_button)
        bot.send_message(callback_query.message.chat.id, select_task(task_id), reply_markup=inline_keyboard)
        userquery(task_id, callback_query.message.chat.id)
        unvis(task_id)
        bot.send_message(callback_query.message.chat.id, '–ö–∞–∫ —Å–¥–µ–ª–∞–µ—à—å –∑–∞–¥–∞–Ω–∏–µ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                         reply_markup=start_keyboard)
    elif str(callback_query.data).startswith('used'):
        used(callback_query.message.chat.id)
    elif str(callback_query.data).startswith('allow'):
        bot.send_message(task_id,'–¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–∏–ª–∏, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω.',
                         reply_markup=start_keyboard)

    elif str(callback_query.data).startswith('abadon'):
        bot.send_message(task_id,
                         '–¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –æ–¥–æ–±—Ä–∏–ª–∏.', reply_markup=start_keyboard)
        task_id = re.findall(pattern,str(callback_query.data))[1]
        vis(task_id)










@bot.message_handler(content_types=['text'])
def message_text_handler(message):

    user_id = message.from_user.id
    db_table_val(message.from_user.id)
    # admin
    if user_id in ADMINS:
        if message.text == '/start':
            db_table_val(message.from_user.id)
            bot.send_message(message.from_user.id, '–ó–¥–æ—Ä–æ–≤–∞ –•–æ–∑—è–∏–Ω', reply_markup=admin_keyboard)
        if message.text == admin_messages[0]:
            bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /add, –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤–ø–∏—à–∏ '
                                                   '–º–Ω–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è(–Ω–µ –±–æ–ª–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤), –Ω–æ–º–µ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã,'
                                                   '—Ü–µ–Ω—É –∑–∞–¥–∞–Ω–∏—è, –Ω–æ–º–µ—Ä –ø–æ–ª–∞, —Å—Å—ã–ª–∫—É, –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è')
            bot.send_message(message.from_user.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n'+'\n'.join(primer_platforms))
            bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä–∞ –ø–æ–ª–æ–≤:\n' + '\n'.join(sex))

            bot.send_message(message.from_user.id, '–ü—Ä–∏–º–µ—Ä:\n'+primer)
        if message.text.startswith('/add'):
            taskarr = message.text.split('\n')
            try:
                add_task(taskarr)
                bot.send_message(message.from_user.id, '–û–∫–µ–π, —è –¥–æ–±–∞–≤–∏–ª —Ç–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –º–æ–∂–µ—à—å –Ω–∞ –Ω–µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', reply_markup=admin_keyboard)
                bot.send_message(message.from_user.id, select_last_task())
            except Exception as ex:
                bot.send_message(message.from_user.id, '–£–ø—Å..—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',reply_markup=admin_keyboard)
                print(ex)
        if message.text.startswith('/desc'):
            try:
                pattern = r'\d+'
                match = re.search(pattern, str(message.text))
                task_id = match.group()
                description = message.text[message.text.find(task_id)+len(str(task_id))+1:]
                print(description)
                update_description(description, task_id)
                bot.send_message(user_id,'–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:', reply_markup=admin_keyboard)
                send_full_task_admin(task_id, user_id)
            except Exception as ex1:
                print(ex1)
                bot.send_message(user_id,'–£–ø—Å..–æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', reply_markup=admin_keyboard)

        if message.text == admin_messages[1]:
            bot.send_message(user_id, '–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å', reply_markup=tasks_keyboard)

        if message.text == '–ù–∞–∑–∞–¥':
            bot.send_message(user_id, '–í–æ–∑–≤—Ä–∞—â–∞—é...', reply_markup=admin_keyboard)

        if message.text in tasks_messages:
            if message.text == tasks_messages[0]:
                tasks = select_all_tasks(0)
            else:
                tasks = select_all_tasks(1)
            try:
                for task in tasks:
                    sleep(0.1)
                    inline_button = telebot.types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data=f'admin {task["id"]}')
                    inline_keyboard = telebot.types.InlineKeyboardMarkup().add(inline_button)
                    task_message = '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' + platforms_ids[str(task['category_id'])] + '\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: '\
                                   + task['name'] + '\n–ü–æ–ª: ' + sex_array[task['sex']-1]
                    bot.send_message(user_id, task_message, reply_markup=inline_keyboard)
                bot.send_message(user_id, '–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è', reply_markup=exit_keyboard)
            except Exception as ex:
                bot.send_message(message.from_user.id, '–£–ø—Å..—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',reply_markup=admin_keyboard)
                print(ex)

        if message.text == admin_messages[2]:
            bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –±–æ—Ç—É –∫–æ–º–º–∞–Ω–¥—É /send –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–µ\n'
                                                   '–ü—Ä–∏–º–µ—Ä: /send –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!')
        if message.text.startswith('/send'):
            send_mass_message(message.text[6:])


    else:

        if message.text == '/start':
            db_table_val(message.from_user.id)
            bot.send_message(message.from_user.id, start_message, reply_markup=start_keyboard)
            bot.send_message(message.from_user.id,attention_message , reply_markup=start_keyboard)
        elif message.text == pravila_message:
            bot.send_message(user_id, vazhno, reply_markup=start_keyboard)
            bot.send_message(user_id, pravila, reply_markup=start_keyboard)
            bot.send_message(user_id, referal, reply_markup=start_keyboard)
            add_user_pravila(user_id)

        elif message.text == account_message:
            bot.send_message(message.from_user.id,'–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ', reply_markup=account_keyboard)
            bot.send_message(message.from_user.id, select_user_info(user_id), reply_markup=account_keyboard)
        elif message.text == account_messages[0]:
            bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞—é...', reply_markup=start_keyboard)

        elif message.text == zarab_message:
            if check_pravila(user_id):
                bot.send_message(message.from_user.id, '–û–∫–µ–π, —É —Ç–µ–±—è –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º?', reply_markup=email_ac—Åess_keyboard)
                bot.send_message(message.from_user.id, ', '.join(for_message_platforms),reply_markup=email_ac—Åess_keyboard)
            else:
                bot.send_message(message.from_user.id, '–¢—ã –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª –ø—Ä–∞–≤–∏–ª–∞. –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–µ—à—å - –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.',
                                 reply_markup=start_keyboard)

        elif message.text in (email_yes_message,select_messages[0]):
            bot.send_message(message.from_user.id, '–û–∫–µ–π, –Ω–∞ –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è?', reply_markup=platforms_keyboard)
        elif message.text in select_messages[1]:
            bot.send_message(user_id, '–í–æ–∑–≤—Ä–∞—â–∞—é...', reply_markup=start_keyboard)
        elif message.text == email_no_message:
            bot.send_message(message.from_user.id, '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Ö–æ—Ç—è '
                                                   '–±—ã –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:')
            bot.send_message(message.from_user.id, ', '.join(for_message_platforms))
            bot.send_message(message.from_user.id, '–ü—Ä–∏—Ö–æ–¥–∏, –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è', reply_markup=email_ac—Åess_keyboard)
        elif message.text in for_message_platforms:
            add_user_category_now(for_message_platforms.index(message.text)+1, user_id)
            bot.send_message(message.from_user.id, '–ü–æ–Ω—è–ª, –∫–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?', reply_markup=sex_keyboard)
        elif message.text in sex_messages:
            if message.text == sex_messages[0]:
                add_sex_to_user('1',user_id)
            else:
                add_sex_to_user('2',user_id)
            select = select_tasks_ids_for_user(user_id)
            if select == False:
                bot.send_message(message.from_user.id, '–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏–µ, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤–∑—è–ª—Å—è',
                                 reply_markup=select_keyboard)
            elif select == 'too_many':
                bot.send_message(message.from_user.id, '–¢—ã —Å–¥–µ–ª–∞–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞',
                                 reply_markup=select_keyboard)
            elif select == 'banned':
                bot.send_message(user_id, '–¢—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–ª –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ! –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é!',
                                 reply_markup=select_keyboard)
            elif select is None:
                bot.send_message(message.from_user.id, '–£–ø—Å..–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                                 reply_markup=select_keyboard)
            elif len(select) == 0:
                bot.send_message(message.from_user.id, '–î–ª—è —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π',
                                 reply_markup=select_keyboard)
            else:
                send_sorted_tasks(user_id, select)

        # if message.text == (pk –∑–∞–¥–∞–Ω–∏—è)
        #   if pk –∑–∞–¥–∞–Ω–∏—è not in banned_categories –¥–ª—è —é–∑–µ—Ä–∞
        #             –≤—ã—Å–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        #             sql –∑–∞–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

        else: bot.send_message(message.from_user.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é', reply_markup=start_keyboard)

@bot.message_handler(content_types=['photo', 'document'])
def photo_handler(message):
    sub_id=message.from_user.id
    task = select_user_now_task(message.from_user.id)
    if task == '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ':
        bot.send_message(sub_id, '–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏', reply_markup=start_keyboard)
        return
    bot.send_message(sub_id,'–ú–æ–ª–æ–¥–µ—Ü! –¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∞. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è—Ç'
                                          '- —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å —Ç–æ–±–æ–π –ª–∏—á–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω –¥–ª—è'
                                          ' –æ–ø–ª–∞—Ç—ã',reply_markup=start_keyboard)
    task_id = select_user_now_task_id(message.from_user.id)
    inline_button = telebot.types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'allow {sub_id}')
    inline_button1 = telebot.types.InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'abadon {sub_id},{task_id}')
    inline_keyboard = telebot.types.InlineKeyboardMarkup().add(inline_button,inline_button1)
    if message.photo is not None:
        idphoto = message.photo[0].file_id
        for admin in ADMINS:
            bot.send_message(admin, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–∏—Å–ª–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n'
                                    f'–í–æ—Ç –µ–≥–æ –∑–∞–¥–∞–Ω–∏–µ:\n' + task)
            bot.send_photo(admin, idphoto, reply_markup=inline_keyboard)
        update_after_task_upload(message.from_user.id)
    else:
        idphoto = message.document.file_id
        for admin in ADMINS:
            bot.send_message(admin, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–∏—Å–ª–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n'
                                    f'–í–æ—Ç –µ–≥–æ –∑–∞–¥–∞–Ω–∏–µ:\n'+task)
            bot.send_document(admin, idphoto, reply_markup=inline_keyboard)
        update_after_task_upload(message.from_user.id)





def update_with_time():
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute('update users set today_tasks = 0, today_categories_ids = ";", new_task_today = 0')
        connection.commit()
        cursor.close()
        connection.close()
        sleep(60 * 60 * 24)

    except Exception as ex:
        print("Error")
        print(ex)


sql_time_update_thread = Thread(target=update_with_time)
sql_time_update_thread.start()

polling_thread = Thread(target=bot.polling, args=(True, 0))
polling_thread.daemon = True
polling_thread.start()





#
# while True:
#     sleep(10)
#     try:
#         print('success')
#         cursor = connection.cursor()
#         cursor.execute('select 1+1')
#         cursor.close
#         print('success')
#         # connection.close()
#         # connection = pymysql.connect(host=host,
#         #                              port=3306,
#         #                              user=user,
#         #                              password=password,
#         #                              database=db_name,
#         #                              cursorclass=pymysql.cursors.DictCursor
#         #                              )
#         #
#         # db_setting1 = 'SET SQL_SAFE_UPDATES = 0'
#         #
#         # connection.cursor().execute(db_setting1)
#         #
#         # connection.cursor().close()
#
#
#
#     except Exception as ex:
#         print("Error")
#         print(1)
#         print(ex)

